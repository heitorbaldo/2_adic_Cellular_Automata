'''
Auxiliary functions
'''

import numpy as np

__all__ = [
    "positive_part_to_list",
    "power_series_to_list",
    "power_series_to_binary",
    "binary_to_array",
    "cut_powers",
]

def positive_part_to_list(s):
    '''Returns an array of the powers.
    Parameters:
    ----------
    s: (string) the power series string generated by the function PAdic.
    '''
    N = len(s)
    p1 = int((N - 10 - 7)/8) + 1
    p2 = int((N - 7)/8) + 1
    Arr = []
    
    if s[1] == ' ' and s[7] == ' ':
        Arr.append(0)
        Arr.append(1)
        for i in range(p1):
            Arr.append(int(s[14+8*i]))
        
    if s[1] == ' ' and s[7] == '^':
        Arr.append(0)
        for i in range(p1):
            Arr.append(int(s[8+8*i]))
    
    if s[1] == '*' and s[3] == ' ':
        Arr.append(1)
        for i in range(p1):
            Arr.append(int(s[10+8*i]))
    
    if s[1] == '*' and s[3] == '^':
        for i in range(p2):
            Arr.append(int(s[4+8*i]))
    
    Len = len(Arr)
    if Len > 2 and Arr[Len-2] > Arr[Len-1]:
        return Arr[0:Len-1]
    else:
        return Arr

    
def power_series_to_list(s):
    '''Returns an array of the powers.
    Parameters:
    ----------
    s: (string) the power series string generated by the function PAdic.
    '''
    N = len(s)
    p = (N - 6)/9
    Arr_negative = []
    Arr_positive = []
    
    if s[4] == '-':
        Arr_negative.append(-int(s[5]))
        for i in range(int(p)):
            if s[13+9*i] == '-':
                Arr_negative.append(-int(s[14+9*i]))
            else:
                S = s[9+9*i:]
                Arr_positive = positive_part_to_list(S)
                break
            
    return Arr_negative+Arr_positive


def power_series_to_binary(a):
    '''Returns an array of the binary coefficients.
    Parameters:
    ----------
    a: the power series generated by the function PAdic.
    '''
    s = str(a)
    if s[4] == '-':
        power_list = power_series_to_list(s)
    else:
        power_list = positive_part_to_list(s)
        
    bin_list = np.zeros(11)
    m = power_list[0]
    for i in range(len(power_list)):
        if m < 0:
            if power_list[i] <= 0:
                bin_list[abs(m) - abs(power_list[i])] = 1 
            
            else: 
                bin_list[abs(m) + power_list[i]] = 1
        
        else:
            bin_list[power_list[i]] = 1
    
    return np.flip(bin_list)


def binary_to_array(b):
    Arr = []
    for i in range(len(b)):
        Arr.append(int(b[i]))
    return Arr


def cut_powers(a, n):
    new_seq = []
    Len = len(a)
    k = Len - n
    if Len > n:
        for i in range(k, Len):
            new_seq.append(a[i])
        return new_seq
    else:
        return a
